generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Measure {
  nodefinido
  barra
  bolsa
  botella
  caja
  frasco
  galonera
  gramo
  kilogramo
  lata
  litro
  mililitro
  pack
  paquete
  tetrapack
  unidad
  vaso
}

enum Role {
  admin
  user
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

enum State {
  activo
  inactivo
}

model Brands {
  id      String    @id @default(uuid())
  name    String    @unique
  state   State?
  Product Product[]
}

model Product {
  id                 String   @id @default(uuid())
  codigoean13        String  @unique
  title              String
  description        String
  inStock            Int
  price              Float    @default(0)
  sizes              Size[]   @default([])
  slug               String   @unique
  tags               String[] @default([])  
  descriptionMeasure String
  measure            Measure @default(nodefinido)

  // Relaciones

  brand   Brands? @relation(fields: [brandId], references: [id])
  brandId String?

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  ProductImage ProductImage[]
  OrderItem    OrderItem[]

  
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  telefono      String?
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?
  state         State?    @default(activo)
  createdAt     DateTime?  @default(now())
  updatedAt     DateTime?  @updatedAt

  address UserAddress?

  // Relaciones
  Order Order[]
}

model Country {
  id   String @id
  name String

  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  // Relaciones
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

// Order de compras
model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  // Relaciones
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  // Relaciones
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}
